% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/au_testengin.R
\name{artDebug}
\alias{artDebug}
\title{Runs selected test(s) in the selected \verb{test-*.R} file}
\usage{
artDebug(match = ".", file = active_editor_file())
}
\arguments{
\item{match}{the calls to test_that were the description matches \code{match} are executed}

\item{file}{the \code{testthat} \verb{test-*.R} script files. Default is the file in the currently active editor window in RStudio.}
}
\value{
NA
}
\description{
Allows narrowing down to a single test in a single \link{testthat} file. \cr
\cr
From RStudio, set a breakpoint in one of the \link{allelematch} files
in order to activate the debugger.
}
\details{
If any of the test executed with \link{artRun} should fail, then we want to be able
to run that specific test in the debugger.

Unfortunately it is not possible to set breakpoints in any of the \verb{test-*.R} script files.\cr
This is because the breakpoints are registered in the sourced and parsed code. \cr
When the script is sourced again, the breakpoints are cleared. And \code{testthat}
sources the scripts as part of the execution. Also, \code{testthat}usually runs in
a separate session from RStudio, so it won't ever be able to use editor breakpoints.

It is however possible to set breakpoints in the built and installed
source code of \link{allelematch}. And this function makes it possible
to run just the failing test. \cr
\cr
Please note the Traceback window that appears under the Environment window
when you run this function with a breakpoint set in \code{allelematch} code.

This method was inspired by https://stackoverflow.com/questions/31548796/debugging-testthat-tests-in-rstudio/63717008#63717008
by Drew D and by \link[devtools:test]{devtools::test_active_file}.
}
\examples{
# From the RStudio console: Run the full set of tests
artRun()

# If an error was detected, you may want to set a breakpoint and debug.
# Unfortunately, this is not supported by testthat. Testthat sources
# the test files. Whenever a file is sourced, the breakpoints in it are lost.
# But artDebug allows setting breakpoints in the tested software .... TBD!

# In RStudio: Show the test-*.R file to test in the active editor window
# Runs all tests in the

# TODO!

}
\seealso{
\link{artVersion} \link{artAssertAllelematchVersion}

\link{artSet} \link{artShow} \link{artClear}
}
