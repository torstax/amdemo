% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/au_testengin.R
\name{testDataSet}
\alias{testDataSet}
\title{Runs a set of tests on the supplied dataset}
\usage{
testDataSet(dataSetDir, skippCleaningInput = FALSE)
}
\arguments{
\item{dataSetDir}{The directory that contains the data sets to be tested. \link{string}}

\item{skippCleaningInput}{If FALSE, the input files are cleaned up
and written to a new file that adds "_clean" to the name of the original files.
If TRUE, this function skips reading the original files and read the cleaned
files directly instead. \link{boolean}}
}
\value{
TODO: Change to return TRUE on success and FALSE on failure.
}
\description{
\code{testDataSet} reads allelematch test input files from and writes output files
to the \code{dataSetDir}.
}
\details{
\code{testDataSet} is the entry point for the \code{regressiontest} package.

Both input and output data files in \code{dataSetDir} have predefined names.

The input files are called "input_new_samples.txt" and "input_Match_references.txt".
The input files are read into data frames at the start of \code{testDataSet}.
The same input data is used in all calls to the \code{allelematch} functions
to be tested.

The output files have names that describe the called \code{allelematch} functions
and the parameters that are passed to the same functions.
}
\examples{
######################
### Raw data input ###
######################

# browser()

# Clear the Environment from old data to avoid this error:
#    "Error: allelematch: error in dynamic tree cutting; several causes for this error;"
# Happens when sourcing allelematch.r to be able to set breakpoints and run the debugger.
rm(list = ls())  # Clear the Environment

#######################
### Needed packages ###
#######################
#library(readr)
#library(plyr)
library(here)
library(allelematch)
library(regressiontest)

# source(here::here("R/au_text.R"))
# source(here::here("R/au_alin.R"))
# source(here::here("R/au_alout.R"))
# source(here::here("R/au_alparam.R"))
# source(here::here("R/au_testengin.R"))


# Check that we are standing in a relevant directory
stopifnot(file.exists(here::here("R/au_text.R"))) # Make sure this file can be sourced relative to the R project dir


######################
### Constants      ###
######################

## R_PROJ_DIR
#
# TODO: REMOVE THIS COMMENT:
# You are recommended to use paths that starts at the Working Directory that you set
# either using the RStudio menu 'Session' -> 'Set Working Directory'
# or using the R command 'setwd()':
#setwd(" ... the directory where the input files are stored ...")
R_PROJ_DIR          = here::here()
stopifnot(file.exists(here::here("test_legacy-2.5.1/TestLegacy-2.5.1.R")))

## DROP_COLUMNS_FROM_NEW_SAMPLES
#
# Note that all alleles that are not present in both new samples and old ref
# will be dropped automatically.
#
# Note also that column headers that are invalid to R are converted to a valid format
# when read from comma separated value (.csv) and tab separated value (.txt) files.
#
# For example: "#SNPs" is converted to "X.SNPs" and "16S1_Gg2912" is converted to "X16S1_Gg2912"
#DROP_COLUMNS_FROM_NEW_SAMPLES = c("Plate", "Place", "Sex", "amp", "ZZ", "YY", "Y2_Gg_644", "Y2_Gg_720", "Y3_Gg_97")

## DROP_COLUMNS_FROM_OLD_REFERENCE
#
# Note that all alleles that are not present in both new samples and old ref
# will be dropped automatically.
#
# Note also that column headers that are invalid to R are converted to a valid format
# when read from comma separated value (.csv) and tab separated value (.txt) files.
#
# For example: "#SNPs" is converted to "X.SNPs" and "16S1_Gg2912" is converted to "X16S1_Gg2912"
#DROP_COLUMNS_FROM_OLD_REFERENCE = c("X.SNPs", "DeadYear", "Ind2", "Sex")

# Column headers that start with digits are not allowed as R 'names'
ALLOW_COLUMN_NAMES_TO_START_WITH_DIGITS = FALSE

## WRITE_CLEANED_INPUT_TO_FILE
#
# After the new samples and reference input files have been
# loaded, cleaned up and aligned, should they then be written out
# again for examination and re-use?
WRITE_CLEANED_INPUT_TO_FILE = TRUE

## IS_BRIEF_AMUNIQUE_SUPPORTED_BY_ALLELEMATCH
#
# This update of allelematch adds one more csv output format
# intended to give a quick overview.
IS_BRIEF_AMUNIQUE_SUPPORTED_BY_ALLELEMATCH = FALSE

## MAX_MISSING_SUPPORTED
#
MAX_MISSING_SUPPORTED = FALSE



###################
### Allelematch ###
###################
# options(warn=1)

wantedVersion    = "2.5.2"
cat("\nTestLegacy-2.5.1: About to test that allelematch", wantedVersion, " is compatible with 2.5.1\n")

require(remotes)
installedVersion = toString(packageVersion("allelematch"))
if (wantedVersion != toString(packageVersion("allelematch"))) {
    detach("package:allelematch", unload=TRUE)
    remotes::install_version("allelematch", version = wantedVersion, repos="https://cran.rstudio.com//")
}
stopifnot(wantedVersion == toString(packageVersion("allelematch")))

cat("\nTestLegacy-2.5.1: About to test that allelematch ", toString(packageVersion("allelematch")), " is compatible with 2.5.1\n")

regressiontest::testDataSet(dataSetDir = "/test_legacy-2.5.1/");
warnings()

cat("\nTestLegacy-2.5.1: DONE!\n\n")
}
